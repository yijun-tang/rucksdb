use std::rc::Rc;

use crate::{cache::Cache, comparator::Comparator, env::{Env, Logger}, filter_policy::FilterPolicy};


/// Options to control the behavior of a database (passed to DB::Open)
pub struct Options {
    // -------------------
    // Parameters that affect behavior

    /// Comparator used to define the order of keys in the table.
    /// Default: a comparator that uses lexicographic byte-wise ordering
    /// 
    /// REQUIRES: The client must ensure that the comparator supplied
    /// here has the same name and orders keys *exactly* the same as the
    /// comparator provided to previous open calls on the same DB.
    pub comparator: Rc<dyn Comparator>,

    /// If true, the database will be created if it is missing.
    pub create_if_missing: bool,

    /// If true, an error is raised if the database already exists.
    pub error_if_exists: bool,

    /// Use the specified object to interact with the environment,
    /// e.g. to read/write files, schedule background work, etc.
    /// Default: Env::Default()
    pub env: Rc<dyn Env>,

    /// Any internal progress/error information generated by the db will
    /// be written to info_log if it is non-null, or to a file stored
    /// in the same directory as the DB contents if info_log is null.
    pub info_log: Option<Rc<dyn Logger>>,


    /// Control over blocks (user data is stored in a set of blocks, and
    /// a block is the unit of reading from disk).
    /// 
    /// If non-NULL, use the specified cache for blocks.
    /// If NULL, leveldb will automatically create and use an 8MB internal cache.
    /// Default: NULL
    pub block_cache: Option<Box<dyn Cache>>,

    /// Disable block cache. If this is set to true,
    /// then no block cache should be used, and the block_cache should
    /// point to a NULL object.
    pub no_block_cache: bool,

    /// If non-null, use the specified filter policy to reduce disk reads.
    /// Many applications will benefit from passing the result of
    /// NewBloomFilterPolicy() here.
    pub filter_policy: Option<Rc<dyn FilterPolicy>>,
}

impl Options {
    /// Create an Options object with default values for all fields.
    pub fn new() -> Self {
        todo!()
    }
}
